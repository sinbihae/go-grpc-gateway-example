// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VpcClient is the client API for Vpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VpcClient interface {
	GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*GetVpcResponse, error)
	ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error)
}

type vpcClient struct {
	cc grpc.ClientConnInterface
}

func NewVpcClient(cc grpc.ClientConnInterface) VpcClient {
	return &vpcClient{cc}
}

func (c *vpcClient) GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*GetVpcResponse, error) {
	out := new(GetVpcResponse)
	err := c.cc.Invoke(ctx, "/network.vpc.Vpc/GetVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcClient) ListVpcs(ctx context.Context, in *ListVpcsRequest, opts ...grpc.CallOption) (*ListVpcsResponse, error) {
	out := new(ListVpcsResponse)
	err := c.cc.Invoke(ctx, "/network.vpc.Vpc/ListVpcs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpcServer is the server API for Vpc service.
// All implementations must embed UnimplementedVpcServer
// for forward compatibility
type VpcServer interface {
	GetVpc(context.Context, *GetVpcRequest) (*GetVpcResponse, error)
	ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error)
	mustEmbedUnimplementedVpcServer()
}

// UnimplementedVpcServer must be embedded to have forward compatible implementations.
type UnimplementedVpcServer struct {
}

func (UnimplementedVpcServer) GetVpc(context.Context, *GetVpcRequest) (*GetVpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpc not implemented")
}
func (UnimplementedVpcServer) ListVpcs(context.Context, *ListVpcsRequest) (*ListVpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVpcs not implemented")
}
func (UnimplementedVpcServer) mustEmbedUnimplementedVpcServer() {}

// UnsafeVpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VpcServer will
// result in compilation errors.
type UnsafeVpcServer interface {
	mustEmbedUnimplementedVpcServer()
}

func RegisterVpcServer(s grpc.ServiceRegistrar, srv VpcServer) {
	s.RegisterService(&Vpc_ServiceDesc, srv)
}

func _Vpc_GetVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServer).GetVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.vpc.Vpc/GetVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServer).GetVpc(ctx, req.(*GetVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpc_ListVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServer).ListVpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.vpc.Vpc/ListVpcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServer).ListVpcs(ctx, req.(*ListVpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vpc_ServiceDesc is the grpc.ServiceDesc for Vpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.vpc.Vpc",
	HandlerType: (*VpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVpc",
			Handler:    _Vpc_GetVpc_Handler,
		},
		{
			MethodName: "ListVpcs",
			Handler:    _Vpc_ListVpcs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/network/vpc.proto",
}
